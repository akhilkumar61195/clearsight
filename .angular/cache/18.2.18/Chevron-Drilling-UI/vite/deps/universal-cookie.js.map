{
  "version": 3,
  "sources": ["../../../../../../node_modules/universal-cookie/esm/index.mjs"],
  "sourcesContent": ["var cookie = {};\n\n/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\nvar hasRequiredCookie;\nfunction requireCookie() {\n  if (hasRequiredCookie) return cookie;\n  hasRequiredCookie = 1;\n\n  /**\n   * Module exports.\n   * @public\n   */\n\n  cookie.parse = parse;\n  cookie.serialize = serialize;\n\n  /**\n   * Module variables.\n   * @private\n   */\n\n  var __toString = Object.prototype.toString;\n  var __hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /**\n   * RegExp to match cookie-name in RFC 6265 sec 4.1.1\n   * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2\n   * which has been replaced by the token definition in RFC 7230 appendix B.\n   *\n   * cookie-name       = token\n   * token             = 1*tchar\n   * tchar             = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n   *                     \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n   *                     \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n   */\n\n  var cookieNameRegExp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\n\n  /**\n   * RegExp to match cookie-value in RFC 6265 sec 4.1.1\n   *\n   * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n   * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n   *                     ; US-ASCII characters excluding CTLs,\n   *                     ; whitespace DQUOTE, comma, semicolon,\n   *                     ; and backslash\n   */\n\n  var cookieValueRegExp = /^(\"?)[\\u0021\\u0023-\\u002B\\u002D-\\u003A\\u003C-\\u005B\\u005D-\\u007E]*\\1$/;\n\n  /**\n   * RegExp to match domain-value in RFC 6265 sec 4.1.1\n   *\n   * domain-value      = <subdomain>\n   *                     ; defined in [RFC1034], Section 3.5, as\n   *                     ; enhanced by [RFC1123], Section 2.1\n   * <subdomain>       = <label> | <subdomain> \".\" <label>\n   * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]\n   *                     Labels must be 63 characters or less.\n   *                     'let-dig' not 'letter' in the first char, per RFC1123\n   * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n   * <let-dig-hyp>     = <let-dig> | \"-\"\n   * <let-dig>         = <letter> | <digit>\n   * <letter>          = any one of the 52 alphabetic characters A through Z in\n   *                     upper case and a through z in lower case\n   * <digit>           = any one of the ten digits 0 through 9\n   *\n   * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173\n   *\n   * > (Note that a leading %x2E (\".\"), if present, is ignored even though that\n   * character is not permitted, but a trailing %x2E (\".\"), if present, will\n   * cause the user agent to ignore the attribute.)\n   */\n\n  var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;\n\n  /**\n   * RegExp to match path-value in RFC 6265 sec 4.1.1\n   *\n   * path-value        = <any CHAR except CTLs or \";\">\n   * CHAR              = %x01-7F\n   *                     ; defined in RFC 5234 appendix B.1\n   */\n\n  var pathValueRegExp = /^[\\u0020-\\u003A\\u003D-\\u007E]*$/;\n\n  /**\n   * Parse a cookie header.\n   *\n   * Parse the given cookie header string into an object\n   * The object has the various cookies as keys(names) => values\n   *\n   * @param {string} str\n   * @param {object} [opt]\n   * @return {object}\n   * @public\n   */\n\n  function parse(str, opt) {\n    if (typeof str !== 'string') {\n      throw new TypeError('argument str must be a string');\n    }\n    var obj = {};\n    var len = str.length;\n    // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.\n    if (len < 2) return obj;\n    var dec = opt && opt.decode || decode;\n    var index = 0;\n    var eqIdx = 0;\n    var endIdx = 0;\n    do {\n      eqIdx = str.indexOf('=', index);\n      if (eqIdx === -1) break; // No more cookie pairs.\n\n      endIdx = str.indexOf(';', index);\n      if (endIdx === -1) {\n        endIdx = len;\n      } else if (eqIdx > endIdx) {\n        // backtrack on prior semicolon\n        index = str.lastIndexOf(';', eqIdx - 1) + 1;\n        continue;\n      }\n      var keyStartIdx = startIndex(str, index, eqIdx);\n      var keyEndIdx = endIndex(str, eqIdx, keyStartIdx);\n      var key = str.slice(keyStartIdx, keyEndIdx);\n\n      // only assign once\n      if (!__hasOwnProperty.call(obj, key)) {\n        var valStartIdx = startIndex(str, eqIdx + 1, endIdx);\n        var valEndIdx = endIndex(str, endIdx, valStartIdx);\n        if (str.charCodeAt(valStartIdx) === 0x22 /* \" */ && str.charCodeAt(valEndIdx - 1) === 0x22 /* \" */) {\n          valStartIdx++;\n          valEndIdx--;\n        }\n        var val = str.slice(valStartIdx, valEndIdx);\n        obj[key] = tryDecode(val, dec);\n      }\n      index = endIdx + 1;\n    } while (index < len);\n    return obj;\n  }\n  function startIndex(str, index, max) {\n    do {\n      var code = str.charCodeAt(index);\n      if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */) return index;\n    } while (++index < max);\n    return max;\n  }\n  function endIndex(str, index, min) {\n    while (index > min) {\n      var code = str.charCodeAt(--index);\n      if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */) return index + 1;\n    }\n    return min;\n  }\n\n  /**\n   * Serialize data into a cookie header.\n   *\n   * Serialize a name value pair into a cookie string suitable for\n   * http headers. An optional options object specifies cookie parameters.\n   *\n   * serialize('foo', 'bar', { httpOnly: true })\n   *   => \"foo=bar; httpOnly\"\n   *\n   * @param {string} name\n   * @param {string} val\n   * @param {object} [opt]\n   * @return {string}\n   * @public\n   */\n\n  function serialize(name, val, opt) {\n    var enc = opt && opt.encode || encodeURIComponent;\n    if (typeof enc !== 'function') {\n      throw new TypeError('option encode is invalid');\n    }\n    if (!cookieNameRegExp.test(name)) {\n      throw new TypeError('argument name is invalid');\n    }\n    var value = enc(val);\n    if (!cookieValueRegExp.test(value)) {\n      throw new TypeError('argument val is invalid');\n    }\n    var str = name + '=' + value;\n    if (!opt) return str;\n    if (null != opt.maxAge) {\n      var maxAge = Math.floor(opt.maxAge);\n      if (!isFinite(maxAge)) {\n        throw new TypeError('option maxAge is invalid');\n      }\n      str += '; Max-Age=' + maxAge;\n    }\n    if (opt.domain) {\n      if (!domainValueRegExp.test(opt.domain)) {\n        throw new TypeError('option domain is invalid');\n      }\n      str += '; Domain=' + opt.domain;\n    }\n    if (opt.path) {\n      if (!pathValueRegExp.test(opt.path)) {\n        throw new TypeError('option path is invalid');\n      }\n      str += '; Path=' + opt.path;\n    }\n    if (opt.expires) {\n      var expires = opt.expires;\n      if (!isDate(expires) || isNaN(expires.valueOf())) {\n        throw new TypeError('option expires is invalid');\n      }\n      str += '; Expires=' + expires.toUTCString();\n    }\n    if (opt.httpOnly) {\n      str += '; HttpOnly';\n    }\n    if (opt.secure) {\n      str += '; Secure';\n    }\n    if (opt.partitioned) {\n      str += '; Partitioned';\n    }\n    if (opt.priority) {\n      var priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n      switch (priority) {\n        case 'low':\n          str += '; Priority=Low';\n          break;\n        case 'medium':\n          str += '; Priority=Medium';\n          break;\n        case 'high':\n          str += '; Priority=High';\n          break;\n        default:\n          throw new TypeError('option priority is invalid');\n      }\n    }\n    if (opt.sameSite) {\n      var sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n      switch (sameSite) {\n        case true:\n          str += '; SameSite=Strict';\n          break;\n        case 'lax':\n          str += '; SameSite=Lax';\n          break;\n        case 'strict':\n          str += '; SameSite=Strict';\n          break;\n        case 'none':\n          str += '; SameSite=None';\n          break;\n        default:\n          throw new TypeError('option sameSite is invalid');\n      }\n    }\n    return str;\n  }\n\n  /**\n   * URL-decode string value. Optimized to skip native call when no %.\n   *\n   * @param {string} str\n   * @returns {string}\n   */\n\n  function decode(str) {\n    return str.indexOf('%') !== -1 ? decodeURIComponent(str) : str;\n  }\n\n  /**\n   * Determine if value is a Date.\n   *\n   * @param {*} val\n   * @private\n   */\n\n  function isDate(val) {\n    return __toString.call(val) === '[object Date]';\n  }\n\n  /**\n   * Try decoding a string using a decoding function.\n   *\n   * @param {string} str\n   * @param {function} decode\n   * @private\n   */\n\n  function tryDecode(str, decode) {\n    try {\n      return decode(str);\n    } catch (e) {\n      return str;\n    }\n  }\n  return cookie;\n}\nvar cookieExports = requireCookie();\nfunction hasDocumentCookie() {\n  const testingValue = typeof global === 'undefined' ? undefined : global.TEST_HAS_DOCUMENT_COOKIE;\n  if (typeof testingValue === 'boolean') {\n    return testingValue;\n  }\n  // Can we get/set cookies on document.cookie?\n  return typeof document === 'object' && typeof document.cookie === 'string';\n}\nfunction parseCookies(cookies) {\n  if (typeof cookies === 'string') {\n    return cookieExports.parse(cookies);\n  } else if (typeof cookies === 'object' && cookies !== null) {\n    return cookies;\n  } else {\n    return {};\n  }\n}\nfunction readCookie(value, options = {}) {\n  const cleanValue = cleanupCookieValue(value);\n  if (!options.doNotParse) {\n    try {\n      return JSON.parse(cleanValue);\n    } catch (e) {\n      // At least we tried\n    }\n  }\n  // Ignore clean value if we failed the deserialization\n  // It is not relevant anymore to trim those values\n  return value;\n}\nfunction cleanupCookieValue(value) {\n  // express prepend j: before serializing a cookie\n  if (value && value[0] === 'j' && value[1] === ':') {\n    return value.substr(2);\n  }\n  return value;\n}\nclass Cookies {\n  constructor(cookies, defaultSetOptions = {}) {\n    this.changeListeners = [];\n    this.HAS_DOCUMENT_COOKIE = false;\n    this.update = () => {\n      if (!this.HAS_DOCUMENT_COOKIE) {\n        return;\n      }\n      const previousCookies = this.cookies;\n      this.cookies = cookieExports.parse(document.cookie);\n      this._checkChanges(previousCookies);\n    };\n    const domCookies = typeof document === 'undefined' ? '' : document.cookie;\n    this.cookies = parseCookies(cookies || domCookies);\n    this.defaultSetOptions = defaultSetOptions;\n    this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\n  }\n  _emitChange(params) {\n    for (let i = 0; i < this.changeListeners.length; ++i) {\n      this.changeListeners[i](params);\n    }\n  }\n  _checkChanges(previousCookies) {\n    const names = new Set(Object.keys(previousCookies).concat(Object.keys(this.cookies)));\n    names.forEach(name => {\n      if (previousCookies[name] !== this.cookies[name]) {\n        this._emitChange({\n          name,\n          value: readCookie(this.cookies[name])\n        });\n      }\n    });\n  }\n  _startPolling() {\n    this.pollingInterval = setInterval(this.update, 300);\n  }\n  _stopPolling() {\n    if (this.pollingInterval) {\n      clearInterval(this.pollingInterval);\n    }\n  }\n  get(name, options = {}) {\n    if (!options.doNotUpdate) {\n      this.update();\n    }\n    return readCookie(this.cookies[name], options);\n  }\n  getAll(options = {}) {\n    if (!options.doNotUpdate) {\n      this.update();\n    }\n    const result = {};\n    for (let name in this.cookies) {\n      result[name] = readCookie(this.cookies[name], options);\n    }\n    return result;\n  }\n  set(name, value, options) {\n    if (options) {\n      options = Object.assign(Object.assign({}, this.defaultSetOptions), options);\n    } else {\n      options = this.defaultSetOptions;\n    }\n    const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n    this.cookies = Object.assign(Object.assign({}, this.cookies), {\n      [name]: stringValue\n    });\n    if (this.HAS_DOCUMENT_COOKIE) {\n      document.cookie = cookieExports.serialize(name, stringValue, options);\n    }\n    this._emitChange({\n      name,\n      value,\n      options\n    });\n  }\n  remove(name, options) {\n    const finalOptions = options = Object.assign(Object.assign(Object.assign({}, this.defaultSetOptions), options), {\n      expires: new Date(1970, 1, 1, 0, 0, 1),\n      maxAge: 0\n    });\n    this.cookies = Object.assign({}, this.cookies);\n    delete this.cookies[name];\n    if (this.HAS_DOCUMENT_COOKIE) {\n      document.cookie = cookieExports.serialize(name, '', finalOptions);\n    }\n    this._emitChange({\n      name,\n      value: undefined,\n      options\n    });\n  }\n  addChangeListener(callback) {\n    this.changeListeners.push(callback);\n    if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 1) {\n      if (typeof window === 'object' && 'cookieStore' in window) {\n        window.cookieStore.addEventListener('change', this.update);\n      } else {\n        this._startPolling();\n      }\n    }\n  }\n  removeChangeListener(callback) {\n    const idx = this.changeListeners.indexOf(callback);\n    if (idx >= 0) {\n      this.changeListeners.splice(idx, 1);\n    }\n    if (this.HAS_DOCUMENT_COOKIE && this.changeListeners.length === 0) {\n      if (typeof window === 'object' && 'cookieStore' in window) {\n        window.cookieStore.removeEventListener('change', this.update);\n      } else {\n        this._stopPolling();\n      }\n    }\n  }\n}\nexport { Cookies as default };"],
  "mappings": "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",
  "names": ["decode"]
}
